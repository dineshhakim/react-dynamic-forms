{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"React Dynamic Forms &amp; Tables","text":"<p>A modern React library featuring JSON-based dynamic forms and tables with advanced configuration options.</p> <p> </p>"},{"location":"#overview","title":"Overview","text":"<p>React Dynamic Forms &amp; Tables provides flexible, reusable UI components for data input and display. Built with TypeScript and designed for modern React applications, this library makes it easy to create complex forms and data tables with minimal code.</p> <p></p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83e\udde9 JSON-based configuration - Define forms and tables using simple JSON schemas</li> <li>\ud83d\udd04 Multiple display modes - Dialog, side panel, and page layouts</li> <li>\ud83d\udee0\ufe0f Visual builders - Form and table builders with live preview</li> <li>\ud83d\udcdd Built-in validation - Form validation with Zod and React Hook Form</li> <li>\ud83d\udd0d Advanced filtering - Searchable and filterable data tables</li> <li>\ud83d\udd12 Permission system - Role-based access control for UI elements</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Getting Started</li> <li>Dynamic Forms</li> <li>Dynamic Tables</li> <li>Permission System</li> <li>API Reference</li> <li>Examples</li> </ul>"},{"location":"#quick-installation","title":"Quick Installation","text":"<pre><code># Install the library\nnpm install react-dynamic-forms-tables\n\n# Install peer dependencies\nnpm install @headlessui/react @heroicons/react react-router-dom tailwindcss\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":""},{"location":"#dynamic-form","title":"Dynamic Form","text":"<pre><code>import { DynamicForm, FormSchema } from 'react-dynamic-forms-tables';\n\nconst userFormSchema: FormSchema = {\n  fields: [\n    {\n      name: 'email',\n      label: 'Email',\n      type: 'email',\n      validation: {\n        required: 'Email is required',\n      },\n    },\n    {\n      name: 'name',\n      label: 'Full Name',\n      type: 'text',\n      validation: {\n        required: 'Name is required',\n      },\n    },\n  ],\n  displayConfig: {\n    mode: 'dialog',\n    title: {\n      create: 'Create New User',\n      edit: 'Edit User Profile',\n      view: 'User Details',\n    }\n  }\n};\n\nfunction MyForm() {\n  return (\n    &lt;DynamicForm \n      schema={userFormSchema}\n      onSubmit={(data) =&gt; console.log('Form submitted:', data)}\n      mode=\"create\"\n      isOpen={true}\n      onClose={() =&gt; console.log('Form closed')}\n    /&gt;\n  );\n}\n</code></pre>"},{"location":"#dynamic-table","title":"Dynamic Table","text":"<pre><code>import { DynamicTable, TableSchema } from 'react-dynamic-forms-tables';\n\nconst tableSchema: TableSchema = {\n  columns: [\n    {\n      id: 'name',\n      header: 'Name',\n      accessor: 'name',\n      type: 'text',\n      sortable: true,\n    },\n    {\n      id: 'status',\n      header: 'Status',\n      accessor: 'status',\n      type: 'badge',\n      badgeOptions: {\n        active: { variant: 'success', label: 'Active' },\n        inactive: { variant: 'danger', label: 'Inactive' },\n      },\n    },\n  ],\n  actions: [\n    {\n      label: 'Edit',\n      onClick: (item) =&gt; console.log('Edit', item),\n      permission: 'edit_users',\n    },\n  ],\n  keyField: 'id',\n};\n\nfunction MyTable() {\n  const data = [\n    { id: '1', name: 'John Doe', status: 'active' },\n    { id: '2', name: 'Jane Smith', status: 'inactive' },\n  ];\n\n  return &lt;DynamicTable schema={tableSchema} data={data} /&gt;;\n}\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides detailed API documentation for the React Dynamic Forms &amp; Tables library.</p>"},{"location":"api-reference/#components","title":"Components","text":""},{"location":"api-reference/#dynamicform","title":"DynamicForm","text":"<p>The main component for rendering dynamic forms.</p>"},{"location":"api-reference/#props","title":"Props","text":"Prop Type Required Description <code>schema</code> <code>FormSchema</code> Yes The form schema configuration <code>onSubmit</code> <code>(data: any) =&gt; void</code> Yes Function called when the form is submitted <code>mode</code> <code>'create' \\| 'edit' \\| 'view'</code> Yes The form mode <code>isOpen</code> <code>boolean</code> Yes Whether the form is open (for dialog/sidepanel modes) <code>onClose</code> <code>() =&gt; void</code> Yes Function called when the form is closed <code>initialData</code> <code>any</code> No Initial data for the form (for edit/view modes) <code>isLoading</code> <code>boolean</code> No Whether the form is in a loading state <code>onCancel</code> <code>() =&gt; void</code> No Function called when the form is cancelled <code>className</code> <code>string</code> No Additional CSS class for the form"},{"location":"api-reference/#formcontainer","title":"FormContainer","text":"<p>A container component that renders the form in different display modes.</p>"},{"location":"api-reference/#props_1","title":"Props","text":"Prop Type Required Description <code>schema</code> <code>FormSchema</code> Yes The form schema configuration <code>onSubmit</code> <code>(data: any) =&gt; void</code> Yes Function called when the form is submitted <code>mode</code> <code>'create' \\| 'edit' \\| 'view'</code> Yes The form mode <code>isOpen</code> <code>boolean</code> Yes Whether the form is open (for dialog/sidepanel modes) <code>onClose</code> <code>() =&gt; void</code> Yes Function called when the form is closed <code>initialData</code> <code>any</code> No Initial data for the form (for edit/view modes) <code>isLoading</code> <code>boolean</code> No Whether the form is in a loading state <code>onCancel</code> <code>() =&gt; void</code> No Function called when the form is cancelled <code>className</code> <code>string</code> No Additional CSS class for the container"},{"location":"api-reference/#dynamictable","title":"DynamicTable","text":"<p>The main component for rendering dynamic tables.</p>"},{"location":"api-reference/#props_2","title":"Props","text":"Prop Type Required Description <code>schema</code> <code>TableSchema</code> Yes The table schema configuration <code>data</code> <code>any[]</code> Yes The data to display in the table <code>isLoading</code> <code>boolean</code> No Whether the table is in a loading state <code>emptyMessage</code> <code>string</code> No Message to display when there is no data <code>onRowClick</code> <code>(item: any) =&gt; void</code> No Function called when a row is clicked <code>editMode</code> <code>boolean</code> No Whether the table is in edit mode <code>onFieldChange</code> <code>(rowIndex: number, field: string, value: any) =&gt; void</code> No Function called when a field is changed in edit mode"},{"location":"api-reference/#formbuilder","title":"FormBuilder","text":"<p>A visual builder for creating form schemas.</p>"},{"location":"api-reference/#props_3","title":"Props","text":"Prop Type Required Description <code>onSave</code> <code>(schema: FormSchema) =&gt; void</code> Yes Function called when the schema is saved <code>initialSchema</code> <code>FormSchema</code> No Initial schema to load in the builder <code>className</code> <code>string</code> No Additional CSS class for the builder"},{"location":"api-reference/#filterpanel","title":"FilterPanel","text":"<p>A component for filtering table data.</p>"},{"location":"api-reference/#props_4","title":"Props","text":"Prop Type Required Description <code>filters</code> <code>TableFilter[]</code> Yes The filter configurations <code>onFilterChange</code> <code>(filters: FilterValue[]) =&gt; void</code> Yes Function called when filters change <code>initialFilters</code> <code>FilterValue[]</code> No Initial filter values <code>className</code> <code>string</code> No Additional CSS class for the filter panel"},{"location":"api-reference/#permissionprovider","title":"PermissionProvider","text":"<p>A provider component for the permission system.</p>"},{"location":"api-reference/#props_5","title":"Props","text":"Prop Type Required Description <code>children</code> <code>React.ReactNode</code> Yes Child components <code>permissions</code> <code>string[]</code> No Array of permission strings the user has"},{"location":"api-reference/#button","title":"Button","text":"<p>A button component with permission support.</p>"},{"location":"api-reference/#props_6","title":"Props","text":"Prop Type Required Description <code>children</code> <code>React.ReactNode</code> Yes Button content <code>variant</code> <code>'primary' \\| 'secondary' \\| 'danger' \\| 'outline' \\| 'success'</code> No Button style variant <code>size</code> <code>'sm' \\| 'md' \\| 'lg'</code> No Button size <code>fullWidth</code> <code>boolean</code> No Whether the button should take full width <code>isLoading</code> <code>boolean</code> No Whether the button is in a loading state <code>permission</code> <code>string \\| string[]</code> No Permission(s) required to see this button <code>className</code> <code>string</code> No Additional CSS class for the button <code>...props</code> <code>React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;</code> No Any other button props"},{"location":"api-reference/#hooks","title":"Hooks","text":""},{"location":"api-reference/#usepermissions","title":"usePermissions","text":"<p>A hook for checking permissions.</p>"},{"location":"api-reference/#returns","title":"Returns","text":"Property Type Description <code>hasPermission</code> <code>(permission: string \\| string[]) =&gt; boolean</code> Function to check if the user has a permission <code>userPermissions</code> <code>string[]</code> Array of permissions the user has"},{"location":"api-reference/#types","title":"Types","text":""},{"location":"api-reference/#formschema","title":"FormSchema","text":"<pre><code>interface FormSchema {\n  fields: FormField[];\n  displayConfig?: {\n    mode: 'dialog' | 'sidepanel' | 'page';\n    width?: string;\n    title?: {\n      create: string;\n      edit: string;\n      view: string;\n    };\n    submitLabel?: {\n      create: string;\n      edit: string;\n    };\n    cancelLabel?: string;\n    redirectAfterSubmit?: boolean;\n    redirectPath?: string;\n  };\n}\n</code></pre>"},{"location":"api-reference/#formfield","title":"FormField","text":"<pre><code>interface FormField {\n  name: string;\n  label: string;\n  type: FieldType;\n  placeholder?: string;\n  required?: boolean;\n  options?: SelectOption[];\n  dataSource?: ApiDataSource;\n  validation?: {\n    required?: string;\n    min?: number;\n    max?: number;\n    minLength?: number;\n    maxLength?: number;\n    pattern?: {\n      value: RegExp;\n      message: string;\n    };\n  };\n  defaultValue?: any;\n  disabled?: boolean;\n  helperText?: string;\n}\n</code></pre>"},{"location":"api-reference/#fieldtype","title":"FieldType","text":"<pre><code>type FieldType = \n  | 'text'\n  | 'email'\n  | 'password'\n  | 'number'\n  | 'select'\n  | 'textarea'\n  | 'checkbox'\n  | 'radio'\n  | 'date';\n</code></pre>"},{"location":"api-reference/#tableschema","title":"TableSchema","text":"<pre><code>interface TableSchema {\n  columns: TableColumn[];\n  filters?: TableFilter[];\n  actions?: TableAction[];\n  keyField: string;\n  defaultSortField?: string;\n  defaultSortDirection?: 'asc' | 'desc';\n  features?: {\n    bulkEdit?: boolean;\n    reordering?: boolean;\n    pagination?: boolean;\n    exportData?: boolean;\n  };\n  bulkEditConfig?: {\n    editableFields: string[];\n    saveAction: (items: any[]) =&gt; Promise&lt;void&gt; | void;\n    cancelAction?: () =&gt; void;\n  };\n}\n</code></pre>"},{"location":"api-reference/#tablecolumn","title":"TableColumn","text":"<pre><code>interface TableColumn {\n  id: string;\n  header: string | React.ReactNode;\n  accessor: string | ((item: any, index?: number) =&gt; React.ReactNode);\n  type: ColumnType;\n  sortable?: boolean;\n  filterable?: boolean;\n  width?: string;\n  className?: string;\n  format?: (value: any) =&gt; string | React.ReactNode;\n  badgeOptions?: {\n    [key: string]: {\n      variant: 'success' | 'warning' | 'danger' | 'info' | 'default';\n      label?: string;\n    };\n  };\n  options?: SelectOption[];\n  dataSource?: ApiDataSource;\n  editable?: boolean;\n}\n</code></pre>"},{"location":"api-reference/#columntype","title":"ColumnType","text":"<pre><code>type ColumnType = 'text' | 'number' | 'date' | 'boolean' | 'badge' | 'actions';\n</code></pre>"},{"location":"api-reference/#tableaction","title":"TableAction","text":"<pre><code>interface TableAction {\n  label: string;\n  icon?: string;\n  onClick: (item: any) =&gt; void;\n  variant?: 'primary' | 'secondary' | 'danger' | 'outline' | 'success';\n  showCondition?: (item: any) =&gt; boolean;\n  permission?: string | string[]; // Permission required to see this action\n}\n</code></pre>"},{"location":"api-reference/#tablefilter","title":"TableFilter","text":"<pre><code>interface TableFilter {\n  id: string;\n  label: string;\n  type: FieldType;\n  accessor: string;\n  operators: FilterOperator[];\n  options?: SelectOption[];\n  dataSource?: ApiDataSource;\n  defaultOperator?: FilterOperator;\n  defaultValue?: any;\n}\n</code></pre>"},{"location":"api-reference/#filteroperator","title":"FilterOperator","text":"<pre><code>type FilterOperator = \n  | 'equals' \n  | 'contains' \n  | 'startsWith' \n  | 'endsWith' \n  | 'greaterThan' \n  | 'lessThan' \n  | 'between'\n  | 'in';\n</code></pre>"},{"location":"api-reference/#selectoption","title":"SelectOption","text":"<pre><code>interface SelectOption {\n  value: string;\n  label: string;\n}\n</code></pre>"},{"location":"api-reference/#apidatasource","title":"ApiDataSource","text":"<pre><code>interface ApiDataSource {\n  type: 'api';\n  url: string;\n  method?: 'GET' | 'POST' | 'PUT';\n  headers?: Record&lt;string, string&gt;;\n  params?: Record&lt;string, string&gt;;\n  bodyData?: any;\n  responseMapping: {\n    value: string; // path to value in response\n    label: string; // path to label in response\n  };\n  dependsOn?: string; // field name this depends on\n}\n</code></pre>"},{"location":"api-reference/#permissioncontexttype","title":"PermissionContextType","text":"<pre><code>interface PermissionContextType {\n  hasPermission: (permission: string | string[]) =&gt; boolean;\n  userPermissions: string[];\n}\n</code></pre>"},{"location":"dynamic-forms/","title":"Dynamic Forms","text":"<p>React Dynamic Forms &amp; Tables provides a powerful system for creating dynamic forms using JSON schemas. This guide covers the features and configuration options for dynamic forms.</p>"},{"location":"dynamic-forms/#form-schema","title":"Form Schema","text":"<p>The form schema is a JSON object that defines the structure and behavior of your form. Here's the basic structure:</p> <pre><code>interface FormSchema {\n  fields: FormField[];\n  displayConfig?: {\n    mode: 'dialog' | 'sidepanel' | 'page';\n    width?: string;\n    title?: {\n      create: string;\n      edit: string;\n      view: string;\n    };\n    submitLabel?: {\n      create: string;\n      edit: string;\n    };\n    cancelLabel?: string;\n    redirectAfterSubmit?: boolean;\n    redirectPath?: string;\n  };\n}\n</code></pre>"},{"location":"dynamic-forms/#field-types","title":"Field Types","text":"<p>The library supports various field types:</p> Type Description <code>text</code> Standard text input <code>email</code> Email input with validation <code>password</code> Password input with masking <code>number</code> Numeric input <code>select</code> Dropdown select <code>textarea</code> Multi-line text input <code>checkbox</code> Boolean checkbox <code>radio</code> Radio button group <code>date</code> Date picker"},{"location":"dynamic-forms/#field-configuration","title":"Field Configuration","text":"<p>Each field in your form is defined with a <code>FormField</code> object:</p> <pre><code>interface FormField {\n  name: string;\n  label: string;\n  type: FieldType;\n  placeholder?: string;\n  required?: boolean;\n  options?: SelectOption[];\n  dataSource?: ApiDataSource;\n  validation?: {\n    required?: string;\n    min?: number;\n    max?: number;\n    minLength?: number;\n    maxLength?: number;\n    pattern?: {\n      value: RegExp;\n      message: string;\n    };\n  };\n  defaultValue?: any;\n  disabled?: boolean;\n  helperText?: string;\n}\n</code></pre>"},{"location":"dynamic-forms/#example-field-configurations","title":"Example Field Configurations","text":""},{"location":"dynamic-forms/#text-field","title":"Text Field","text":"<pre><code>{\n  name: 'firstName',\n  label: 'First Name',\n  type: 'text',\n  placeholder: 'Enter your first name',\n  validation: {\n    required: 'First name is required',\n    minLength: 2,\n    maxLength: 50\n  },\n  helperText: 'Your legal first name'\n}\n</code></pre>"},{"location":"dynamic-forms/#email-field-with-validation","title":"Email Field with Validation","text":"<pre><code>{\n  name: 'email',\n  label: 'Email Address',\n  type: 'email',\n  placeholder: 'Enter your email',\n  validation: {\n    required: 'Email is required',\n    pattern: {\n      value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n      message: 'Invalid email address',\n    },\n  }\n}\n</code></pre>"},{"location":"dynamic-forms/#select-field-with-options","title":"Select Field with Options","text":"<pre><code>{\n  name: 'country',\n  label: 'Country',\n  type: 'select',\n  options: [\n    { value: 'us', label: 'United States' },\n    { value: 'ca', label: 'Canada' },\n    { value: 'uk', label: 'United Kingdom' },\n    { value: 'au', label: 'Australia' }\n  ],\n  validation: {\n    required: 'Please select a country'\n  }\n}\n</code></pre>"},{"location":"dynamic-forms/#select-field-with-api-data-source","title":"Select Field with API Data Source","text":"<pre><code>{\n  name: 'department',\n  label: 'Department',\n  type: 'select',\n  dataSource: {\n    type: 'api',\n    url: '/api/departments',\n    method: 'GET',\n    responseMapping: {\n      value: 'id',\n      label: 'name'\n    }\n  },\n  validation: {\n    required: 'Please select a department'\n  }\n}\n</code></pre>"},{"location":"dynamic-forms/#display-modes","title":"Display Modes","text":"<p>The library supports three different ways to display forms:</p>"},{"location":"dynamic-forms/#dialog-mode","title":"Dialog Mode","text":"<p>Forms appear in a modal dialog in the center of the screen. Ideal for quick interactions.</p> <pre><code>displayConfig: {\n  mode: 'dialog',\n  width: 'lg', // sm, md, lg, xl, 2xl\n  title: {\n    create: 'Create New User',\n    edit: 'Edit User Profile',\n    view: 'User Details',\n  }\n}\n</code></pre>"},{"location":"dynamic-forms/#side-panel-mode","title":"Side Panel Mode","text":"<p>Forms slide in from the right side of the screen. Good for maintaining context while editing.</p> <pre><code>displayConfig: {\n  mode: 'sidepanel',\n  width: 'max-w-lg', // Any Tailwind width class\n  title: {\n    create: 'Add New Product',\n    edit: 'Edit Product',\n    view: 'Product Details',\n  }\n}\n</code></pre>"},{"location":"dynamic-forms/#page-mode","title":"Page Mode","text":"<p>Forms take up a full page. Best for complex forms or when full focus is needed.</p> <pre><code>displayConfig: {\n  mode: 'page',\n  title: {\n    create: 'Event Registration',\n    edit: 'Update Registration',\n    view: 'Registration Details',\n  },\n  redirectAfterSubmit: true,\n  redirectPath: '/registration-confirmation',\n}\n</code></pre>"},{"location":"dynamic-forms/#form-validation","title":"Form Validation","text":"<p>The library uses React Hook Form with Zod for validation. You can specify validation rules in the field configuration:</p> <pre><code>validation: {\n  required: 'This field is required', // Error message for required fields\n  min: 0, // Minimum value for number fields\n  max: 100, // Maximum value for number fields\n  minLength: 5, // Minimum length for text fields\n  maxLength: 50, // Maximum length for text fields\n  pattern: { // Regex pattern for validation\n    value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n    message: 'Invalid email address',\n  },\n}\n</code></pre>"},{"location":"dynamic-forms/#form-builder","title":"Form Builder","text":"<p>The library includes a visual form builder that allows you to create form schemas interactively:</p> <pre><code>import { FormBuilder } from 'react-dynamic-forms-tables';\n\nfunction MyFormBuilder() {\n  const handleSave = (schema) =&gt; {\n    console.log('Form schema:', schema);\n    // Save the schema to your backend or local storage\n  };\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;h1 className=\"text-2xl font-bold mb-4\"&gt;Form Builder&lt;/h1&gt;\n      &lt;FormBuilder onSave={handleSave} /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"dynamic-forms/#complete-example","title":"Complete Example","text":"<p>Here's a complete example of a registration form:</p> <pre><code>import { useState } from 'react';\nimport { DynamicForm, FormSchema } from 'react-dynamic-forms-tables';\n\nfunction RegistrationForm() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const formSchema: FormSchema = {\n    fields: [\n      {\n        name: 'firstName',\n        label: 'First Name',\n        type: 'text',\n        placeholder: 'Enter your first name',\n        validation: {\n          required: 'First name is required',\n        },\n      },\n      {\n        name: 'lastName',\n        label: 'Last Name',\n        type: 'text',\n        placeholder: 'Enter your last name',\n        validation: {\n          required: 'Last name is required',\n        },\n      },\n      {\n        name: 'email',\n        label: 'Email',\n        type: 'email',\n        placeholder: 'Enter your email',\n        validation: {\n          required: 'Email is required',\n          pattern: {\n            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n            message: 'Invalid email address',\n          },\n        },\n      },\n      {\n        name: 'password',\n        label: 'Password',\n        type: 'password',\n        placeholder: 'Create a password',\n        validation: {\n          required: 'Password is required',\n          minLength: {\n            value: 8,\n            message: 'Password must be at least 8 characters',\n          },\n        },\n      },\n      {\n        name: 'role',\n        label: 'Role',\n        type: 'select',\n        options: [\n          { value: 'user', label: 'User' },\n          { value: 'admin', label: 'Administrator' },\n          { value: 'editor', label: 'Editor' },\n        ],\n        validation: {\n          required: 'Please select a role',\n        },\n      },\n      {\n        name: 'agreeToTerms',\n        label: 'I agree to the terms and conditions',\n        type: 'checkbox',\n        validation: {\n          required: 'You must agree to the terms',\n        },\n      },\n    ],\n    displayConfig: {\n      mode: 'dialog',\n      width: 'lg',\n      title: {\n        create: 'Create Account',\n        edit: 'Edit Account',\n        view: 'Account Details',\n      },\n      submitLabel: {\n        create: 'Register',\n        edit: 'Update',\n      },\n      cancelLabel: 'Cancel',\n    },\n  };\n\n  const handleSubmit = (data) =&gt; {\n    console.log('Registration data:', data);\n    setIsOpen(false);\n    // Process registration...\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button\n        className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n        onClick={() =&gt; setIsOpen(true)}\n      &gt;\n        Register\n      &lt;/button&gt;\n\n      &lt;DynamicForm\n        schema={formSchema}\n        onSubmit={handleSubmit}\n        mode=\"create\"\n        isOpen={isOpen}\n        onClose={() =&gt; setIsOpen(false)}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default RegistrationForm;\n</code></pre>"},{"location":"dynamic-tables/","title":"Dynamic Tables","text":"<p>React Dynamic Forms &amp; Tables provides a powerful system for creating dynamic data tables using JSON schemas. This guide covers the features and configuration options for dynamic tables.</p>"},{"location":"dynamic-tables/#table-schema","title":"Table Schema","text":"<p>The table schema is a JSON object that defines the structure and behavior of your table. Here's the basic structure:</p> <pre><code>interface TableSchema {\n  columns: TableColumn[];\n  filters?: TableFilter[];\n  actions?: TableAction[];\n  keyField: string;\n  defaultSortField?: string;\n  defaultSortDirection?: 'asc' | 'desc';\n  features?: {\n    bulkEdit?: boolean;\n    reordering?: boolean;\n    pagination?: boolean;\n    exportData?: boolean;\n  };\n  bulkEditConfig?: {\n    editableFields: string[];\n    saveAction: (items: any[]) =&gt; Promise&lt;void&gt; | void;\n    cancelAction?: () =&gt; void;\n  };\n}\n</code></pre>"},{"location":"dynamic-tables/#column-types","title":"Column Types","text":"<p>The library supports various column types:</p> Type Description <code>text</code> Standard text display <code>number</code> Numeric display with optional formatting <code>date</code> Date display with formatting <code>boolean</code> Boolean values displayed as Yes/No <code>badge</code> Status badges with color variants <code>actions</code> Action buttons"},{"location":"dynamic-tables/#column-configuration","title":"Column Configuration","text":"<p>Each column in your table is defined with a <code>TableColumn</code> object:</p> <pre><code>interface TableColumn {\n  id: string;\n  header: string | React.ReactNode;\n  accessor: string | ((item: any, index?: number) =&gt; React.ReactNode);\n  type: ColumnType;\n  sortable?: boolean;\n  filterable?: boolean;\n  width?: string;\n  className?: string;\n  format?: (value: any) =&gt; string | React.ReactNode;\n  badgeOptions?: {\n    [key: string]: {\n      variant: 'success' | 'warning' | 'danger' | 'info' | 'default';\n      label?: string;\n    };\n  };\n  options?: SelectOption[];\n  dataSource?: ApiDataSource;\n  editable?: boolean;\n}\n</code></pre>"},{"location":"dynamic-tables/#example-column-configurations","title":"Example Column Configurations","text":""},{"location":"dynamic-tables/#text-column","title":"Text Column","text":"<pre><code>{\n  id: 'name',\n  header: 'Name',\n  accessor: 'name',\n  type: 'text',\n  sortable: true,\n  filterable: true\n}\n</code></pre>"},{"location":"dynamic-tables/#date-column-with-formatting","title":"Date Column with Formatting","text":"<pre><code>{\n  id: 'createdAt',\n  header: 'Created Date',\n  accessor: 'createdAt',\n  type: 'date',\n  sortable: true,\n  format: (value) =&gt; new Date(value).toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  })\n}\n</code></pre>"},{"location":"dynamic-tables/#badge-column","title":"Badge Column","text":"<pre><code>{\n  id: 'status',\n  header: 'Status',\n  accessor: 'status',\n  type: 'badge',\n  badgeOptions: {\n    active: {\n      variant: 'success',\n      label: 'Active'\n    },\n    pending: {\n      variant: 'warning',\n      label: 'Pending'\n    },\n    inactive: {\n      variant: 'danger',\n      label: 'Inactive'\n    }\n  }\n}\n</code></pre>"},{"location":"dynamic-tables/#custom-accessor-function","title":"Custom Accessor Function","text":"<pre><code>{\n  id: 'fullName',\n  header: 'Full Name',\n  accessor: (item) =&gt; `${item.firstName} ${item.lastName}`,\n  type: 'text',\n  sortable: false\n}\n</code></pre>"},{"location":"dynamic-tables/#table-actions","title":"Table Actions","text":"<p>You can define actions that appear for each row in the table:</p> <pre><code>actions: [\n  {\n    label: 'Edit',\n    onClick: (item) =&gt; console.log('Edit', item),\n    variant: 'primary',\n    permission: 'edit_users', // Only users with this permission will see this action\n    showCondition: (item) =&gt; item.status === 'active' // Only show for active items\n  },\n  {\n    label: 'Delete',\n    onClick: (item) =&gt; console.log('Delete', item),\n    variant: 'danger',\n    permission: ['delete_users', 'admin'] // Users with any of these permissions will see this action\n  }\n]\n</code></pre>"},{"location":"dynamic-tables/#filtering","title":"Filtering","text":"<p>The library supports advanced filtering capabilities:</p> <pre><code>filters: [\n  {\n    id: 'name_filter',\n    label: 'Name',\n    type: 'text',\n    accessor: 'name',\n    operators: ['contains', 'equals', 'startsWith', 'endsWith']\n  },\n  {\n    id: 'status_filter',\n    label: 'Status',\n    type: 'select',\n    accessor: 'status',\n    operators: ['equals', 'in'],\n    options: [\n      { value: 'active', label: 'Active' },\n      { value: 'inactive', label: 'Inactive' },\n      { value: 'pending', label: 'Pending' }\n    ]\n  },\n  {\n    id: 'created_date_filter',\n    label: 'Created Date',\n    type: 'date',\n    accessor: 'createdAt',\n    operators: ['equals', 'greaterThan', 'lessThan', 'between']\n  }\n]\n</code></pre>"},{"location":"dynamic-tables/#sorting","title":"Sorting","text":"<p>You can enable sorting for columns by setting the <code>sortable</code> property to <code>true</code>. You can also set a default sort field and direction:</p> <pre><code>{\n  columns: [\n    {\n      id: 'name',\n      header: 'Name',\n      accessor: 'name',\n      type: 'text',\n      sortable: true\n    },\n    // Other columns...\n  ],\n  defaultSortField: 'name',\n  defaultSortDirection: 'asc'\n}\n</code></pre>"},{"location":"dynamic-tables/#bulk-editing","title":"Bulk Editing","text":"<p>The library supports bulk editing of table data:</p> <pre><code>features: {\n  bulkEdit: true\n},\nbulkEditConfig: {\n  editableFields: ['status', 'role'],\n  saveAction: async (items) =&gt; {\n    console.log('Saving items:', items);\n    // Make API call to save changes\n    await api.updateUsers(items);\n  },\n  cancelAction: () =&gt; {\n    console.log('Bulk edit cancelled');\n  }\n}\n</code></pre>"},{"location":"dynamic-tables/#complete-example","title":"Complete Example","text":"<p>Here's a complete example of a user management table:</p> <pre><code>import { DynamicTable, TableSchema } from 'react-dynamic-forms-tables';\n\nfunction UserManagementTable() {\n  const tableSchema: TableSchema = {\n    columns: [\n      {\n        id: 'name',\n        header: 'Name',\n        accessor: 'name',\n        type: 'text',\n        sortable: true,\n        filterable: true\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        accessor: 'email',\n        type: 'text',\n        sortable: true\n      },\n      {\n        id: 'role',\n        header: 'Role',\n        accessor: 'role',\n        type: 'text'\n      },\n      {\n        id: 'status',\n        header: 'Status',\n        accessor: 'status',\n        type: 'badge',\n        badgeOptions: {\n          active: {\n            variant: 'success',\n            label: 'Active'\n          },\n          inactive: {\n            variant: 'danger',\n            label: 'Inactive'\n          },\n          pending: {\n            variant: 'warning',\n            label: 'Pending'\n          }\n        }\n      },\n      {\n        id: 'createdAt',\n        header: 'Created',\n        accessor: 'createdAt',\n        type: 'date',\n        sortable: true,\n        format: (value) =&gt; new Date(value).toLocaleDateString()\n      }\n    ],\n    filters: [\n      {\n        id: 'name_filter',\n        label: 'Name',\n        type: 'text',\n        accessor: 'name',\n        operators: ['contains', 'equals', 'startsWith']\n      },\n      {\n        id: 'status_filter',\n        label: 'Status',\n        type: 'select',\n        accessor: 'status',\n        operators: ['equals'],\n        options: [\n          { value: 'active', label: 'Active' },\n          { value: 'inactive', label: 'Inactive' },\n          { value: 'pending', label: 'Pending' }\n        ]\n      }\n    ],\n    actions: [\n      {\n        label: 'Edit',\n        onClick: (user) =&gt; console.log('Edit user:', user),\n        variant: 'primary',\n        permission: 'edit_users'\n      },\n      {\n        label: 'Delete',\n        onClick: (user) =&gt; console.log('Delete user:', user),\n        variant: 'danger',\n        permission: 'delete_users',\n        showCondition: (user) =&gt; user.status !== 'pending'\n      }\n    ],\n    keyField: 'id',\n    defaultSortField: 'name',\n    defaultSortDirection: 'asc',\n    features: {\n      bulkEdit: true,\n      pagination: true,\n      exportData: true\n    }\n  };\n\n  const users = [\n    {\n      id: '1',\n      name: 'John Doe',\n      email: 'john@example.com',\n      role: 'Admin',\n      status: 'active',\n      createdAt: '2023-01-15T08:30:00Z'\n    },\n    {\n      id: '2',\n      name: 'Jane Smith',\n      email: 'jane@example.com',\n      role: 'User',\n      status: 'active',\n      createdAt: '2023-02-20T10:15:00Z'\n    },\n    {\n      id: '3',\n      name: 'Bob Johnson',\n      email: 'bob@example.com',\n      role: 'User',\n      status: 'inactive',\n      createdAt: '2023-01-05T14:45:00Z'\n    },\n    {\n      id: '4',\n      name: 'Alice Williams',\n      email: 'alice@example.com',\n      role: 'Editor',\n      status: 'pending',\n      createdAt: '2023-03-10T09:20:00Z'\n    }\n  ];\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;h1 className=\"text-2xl font-bold mb-4\"&gt;User Management&lt;/h1&gt;\n      &lt;DynamicTable schema={tableSchema} data={users} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default UserManagementTable;\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<p>This page provides practical examples of using React Dynamic Forms &amp; Tables in various scenarios.</p>"},{"location":"examples/#basic-contact-form","title":"Basic Contact Form","text":"<p>A simple contact form with validation:</p> <pre><code>import { useState } from 'react';\nimport { DynamicForm, FormSchema } from 'react-dynamic-forms-tables';\n\nfunction ContactForm() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const formSchema: FormSchema = {\n    fields: [\n      {\n        name: 'name',\n        label: 'Full Name',\n        type: 'text',\n        placeholder: 'Enter your full name',\n        validation: {\n          required: 'Name is required',\n        },\n      },\n      {\n        name: 'email',\n        label: 'Email Address',\n        type: 'email',\n        placeholder: 'Enter your email',\n        validation: {\n          required: 'Email is required',\n          pattern: {\n            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n            message: 'Invalid email address',\n          },\n        },\n      },\n      {\n        name: 'subject',\n        label: 'Subject',\n        type: 'text',\n        placeholder: 'Enter subject',\n        validation: {\n          required: 'Subject is required',\n        },\n      },\n      {\n        name: 'message',\n        label: 'Message',\n        type: 'textarea',\n        placeholder: 'Enter your message',\n        validation: {\n          required: 'Message is required',\n          minLength: {\n            value: 10,\n            message: 'Message must be at least 10 characters',\n          },\n        },\n      },\n    ],\n    displayConfig: {\n      mode: 'dialog',\n      title: {\n        create: 'Contact Us',\n        edit: 'Edit Message',\n        view: 'View Message',\n      },\n      submitLabel: {\n        create: 'Send Message',\n        edit: 'Update Message',\n      },\n    },\n  };\n\n  const handleSubmit = (data) =&gt; {\n    console.log('Form submitted:', data);\n    setIsOpen(false);\n    // Process form submission...\n  };\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;button\n        className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n        onClick={() =&gt; setIsOpen(true)}\n      &gt;\n        Contact Us\n      &lt;/button&gt;\n\n      &lt;DynamicForm\n        schema={formSchema}\n        onSubmit={handleSubmit}\n        mode=\"create\"\n        isOpen={isOpen}\n        onClose={() =&gt; setIsOpen(false)}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ContactForm;\n</code></pre>"},{"location":"examples/#product-management-table","title":"Product Management Table","text":"<p>A table for managing products with filtering and actions:</p> <pre><code>import { DynamicTable, TableSchema } from 'react-dynamic-forms-tables';\n\nfunction ProductTable() {\n  const tableSchema: TableSchema = {\n    columns: [\n      {\n        id: 'name',\n        header: 'Product Name',\n        accessor: 'name',\n        type: 'text',\n        sortable: true,\n        filterable: true,\n      },\n      {\n        id: 'category',\n        header: 'Category',\n        accessor: 'category',\n        type: 'text',\n        sortable: true,\n      },\n      {\n        id: 'price',\n        header: 'Price',\n        accessor: 'price',\n        type: 'number',\n        sortable: true,\n        format: (value) =&gt; `$${value.toFixed(2)}`,\n      },\n      {\n        id: 'stock',\n        header: 'Stock',\n        accessor: 'stock',\n        type: 'number',\n        sortable: true,\n      },\n      {\n        id: 'status',\n        header: 'Status',\n        accessor: 'status',\n        type: 'badge',\n        badgeOptions: {\n          inStock: {\n            variant: 'success',\n            label: 'In Stock',\n          },\n          lowStock: {\n            variant: 'warning',\n            label: 'Low Stock',\n          },\n          outOfStock: {\n            variant: 'danger',\n            label: 'Out of Stock',\n          },\n        },\n      },\n    ],\n    filters: [\n      {\n        id: 'name_filter',\n        label: 'Product Name',\n        type: 'text',\n        accessor: 'name',\n        operators: ['contains', 'equals', 'startsWith'],\n      },\n      {\n        id: 'category_filter',\n        label: 'Category',\n        type: 'select',\n        accessor: 'category',\n        operators: ['equals'],\n        options: [\n          { value: 'Electronics', label: 'Electronics' },\n          { value: 'Clothing', label: 'Clothing' },\n          { value: 'Home &amp; Kitchen', label: 'Home &amp; Kitchen' },\n          { value: 'Books', label: 'Books' },\n        ],\n      },\n      {\n        id: 'price_filter',\n        label: 'Price',\n        type: 'number',\n        accessor: 'price',\n        operators: ['equals', 'greaterThan', 'lessThan', 'between'],\n      },\n      {\n        id: 'status_filter',\n        label: 'Status',\n        type: 'select',\n        accessor: 'status',\n        operators: ['equals'],\n        options: [\n          { value: 'inStock', label: 'In Stock' },\n          { value: 'lowStock', label: 'Low Stock' },\n          { value: 'outOfStock', label: 'Out of Stock' },\n        ],\n      },\n    ],\n    actions: [\n      {\n        label: 'Edit',\n        onClick: (product) =&gt; console.log('Edit product:', product),\n        variant: 'primary',\n        permission: 'edit_products',\n      },\n      {\n        label: 'Delete',\n        onClick: (product) =&gt; console.log('Delete product:', product),\n        variant: 'danger',\n        permission: 'delete_products',\n      },\n    ],\n    keyField: 'id',\n    defaultSortField: 'name',\n    defaultSortDirection: 'asc',\n  };\n\n  const products = [\n    {\n      id: '1',\n      name: 'Laptop Pro',\n      category: 'Electronics',\n      price: 1299.99,\n      stock: 45,\n      status: 'inStock',\n    },\n    {\n      id: '2',\n      name: 'Wireless Headphones',\n      category: 'Electronics',\n      price: 199.99,\n      stock: 78,\n      status: 'inStock',\n    },\n    {\n      id: '3',\n      name: 'Cotton T-Shirt',\n      category: 'Clothing',\n      price: 24.99,\n      stock: 5,\n      status: 'lowStock',\n    },\n    {\n      id: '4',\n      name: 'Coffee Maker',\n      category: 'Home &amp; Kitchen',\n      price: 89.99,\n      stock: 0,\n      status: 'outOfStock',\n    },\n    {\n      id: '5',\n      name: 'Programming Guide',\n      category: 'Books',\n      price: 49.99,\n      stock: 12,\n      status: 'inStock',\n    },\n  ];\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;h1 className=\"text-2xl font-bold mb-4\"&gt;Product Inventory&lt;/h1&gt;\n      &lt;DynamicTable schema={tableSchema} data={products} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ProductTable;\n</code></pre>"},{"location":"examples/#user-registration-form-with-side-panel","title":"User Registration Form with Side Panel","text":"<p>A user registration form displayed in a side panel:</p> <pre><code>import { useState } from 'react';\nimport { DynamicForm, FormSchema } from 'react-dynamic-forms-tables';\n\nfunction UserRegistration() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const formSchema: FormSchema = {\n    fields: [\n      {\n        name: 'firstName',\n        label: 'First Name',\n        type: 'text',\n        validation: {\n          required: 'First name is required',\n        },\n      },\n      {\n        name: 'lastName',\n        label: 'Last Name',\n        type: 'text',\n        validation: {\n          required: 'Last name is required',\n        },\n      },\n      {\n        name: 'email',\n        label: 'Email',\n        type: 'email',\n        validation: {\n          required: 'Email is required',\n          pattern: {\n            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n            message: 'Invalid email address',\n          },\n        },\n      },\n      {\n        name: 'password',\n        label: 'Password',\n        type: 'password',\n        validation: {\n          required: 'Password is required',\n          minLength: {\n            value: 8,\n            message: 'Password must be at least 8 characters',\n          },\n        },\n      },\n      {\n        name: 'confirmPassword',\n        label: 'Confirm Password',\n        type: 'password',\n        validation: {\n          required: 'Please confirm your password',\n        },\n      },\n      {\n        name: 'role',\n        label: 'Role',\n        type: 'select',\n        options: [\n          { value: 'user', label: 'User' },\n          { value: 'admin', label: 'Administrator' },\n        ],\n        defaultValue: 'user',\n      },\n      {\n        name: 'agreeToTerms',\n        label: 'I agree to the terms and conditions',\n        type: 'checkbox',\n        validation: {\n          required: 'You must agree to the terms',\n        },\n      },\n    ],\n    displayConfig: {\n      mode: 'sidepanel',\n      width: 'max-w-md',\n      title: {\n        create: 'Register New User',\n        edit: 'Edit User',\n        view: 'User Details',\n      },\n      submitLabel: {\n        create: 'Register',\n        edit: 'Save Changes',\n      },\n    },\n  };\n\n  const handleSubmit = (data) =&gt; {\n    // Validate that passwords match\n    if (data.password !== data.confirmPassword) {\n      alert('Passwords do not match');\n      return;\n    }\n\n    console.log('Registration data:', data);\n    setIsOpen(false);\n    // Process registration...\n  };\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;button\n        className=\"px-4 py-2 bg-green-600 text-white rounded\"\n        onClick={() =&gt; setIsOpen(true)}\n      &gt;\n        Register New User\n      &lt;/button&gt;\n\n      &lt;DynamicForm\n        schema={formSchema}\n        onSubmit={handleSubmit}\n        mode=\"create\"\n        isOpen={isOpen}\n        onClose={() =&gt; setIsOpen(false)}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default UserRegistration;\n</code></pre>"},{"location":"examples/#event-management-with-permissions","title":"Event Management with Permissions","text":"<p>A complete example showing event management with permission-based controls:</p> <pre><code>import { useState } from 'react';\nimport { \n  DynamicTable, \n  DynamicForm, \n  Button, \n  usePermissions, \n  TableSchema, \n  FormSchema \n} from 'react-dynamic-forms-tables';\n\nfunction EventManagement() {\n  const { hasPermission } = usePermissions();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [selectedEvent, setSelectedEvent] = useState(null);\n  const [formMode, setFormMode] = useState('create');\n\n  const events = [\n    {\n      id: '1',\n      title: 'Annual Conference',\n      date: '2023-10-15',\n      location: 'Convention Center',\n      organizer: 'Marketing Team',\n      status: 'upcoming',\n      attendees: 250,\n    },\n    {\n      id: '2',\n      title: 'Product Launch',\n      date: '2023-11-05',\n      location: 'Main Office',\n      organizer: 'Product Team',\n      status: 'upcoming',\n      attendees: 100,\n    },\n    {\n      id: '3',\n      title: 'Team Building',\n      date: '2023-09-10',\n      location: 'City Park',\n      organizer: 'HR Department',\n      status: 'completed',\n      attendees: 45,\n    },\n  ];\n\n  const tableSchema: TableSchema = {\n    columns: [\n      {\n        id: 'title',\n        header: 'Event Title',\n        accessor: 'title',\n        type: 'text',\n        sortable: true,\n      },\n      {\n        id: 'date',\n        header: 'Date',\n        accessor: 'date',\n        type: 'date',\n        sortable: true,\n      },\n      {\n        id: 'location',\n        header: 'Location',\n        accessor: 'location',\n        type: 'text',\n      },\n      {\n        id: 'organizer',\n        header: 'Organizer',\n        accessor: 'organizer',\n        type: 'text',\n      },\n      {\n        id: 'attendees',\n        header: 'Attendees',\n        accessor: 'attendees',\n        type: 'number',\n      },\n      {\n        id: 'status',\n        header: 'Status',\n        accessor: 'status',\n        type: 'badge',\n        badgeOptions: {\n          upcoming: {\n            variant: 'info',\n            label: 'Upcoming',\n          },\n          inProgress: {\n            variant: 'warning',\n            label: 'In Progress',\n          },\n          completed: {\n            variant: 'success',\n            label: 'Completed',\n          },\n          cancelled: {\n            variant: 'danger',\n            label: 'Cancelled',\n          },\n        },\n      },\n    ],\n    filters: [\n      {\n        id: 'title_filter',\n        label: 'Event Title',\n        type: 'text',\n        accessor: 'title',\n        operators: ['contains', 'equals'],\n      },\n      {\n        id: 'status_filter',\n        label: 'Status',\n        type: 'select',\n        accessor: 'status',\n        operators: ['equals'],\n        options: [\n          { value: 'upcoming', label: 'Upcoming' },\n          { value: 'inProgress', label: 'In Progress' },\n          { value: 'completed', label: 'Completed' },\n          { value: 'cancelled', label: 'Cancelled' },\n        ],\n      },\n    ],\n    actions: [\n      {\n        label: 'View',\n        onClick: (event) =&gt; {\n          setSelectedEvent(event);\n          setFormMode('view');\n          setIsFormOpen(true);\n        },\n        variant: 'outline',\n        permission: 'view_events',\n      },\n      {\n        label: 'Edit',\n        onClick: (event) =&gt; {\n          setSelectedEvent(event);\n          setFormMode('edit');\n          setIsFormOpen(true);\n        },\n        variant: 'primary',\n        permission: 'edit_events',\n        showCondition: (event) =&gt; event.status !== 'completed',\n      },\n      {\n        label: 'Cancel',\n        onClick: (event) =&gt; {\n          console.log('Cancel event:', event);\n          // Show confirmation dialog and cancel\n        },\n        variant: 'danger',\n        permission: 'cancel_events',\n        showCondition: (event) =&gt; event.status === 'upcoming',\n      },\n    ],\n    keyField: 'id',\n    defaultSortField: 'date',\n    defaultSortDirection: 'asc',\n  };\n\n  const formSchema: FormSchema = {\n    fields: [\n      {\n        name: 'title',\n        label: 'Event Title',\n        type: 'text',\n        validation: {\n          required: 'Event title is required',\n        },\n      },\n      {\n        name: 'date',\n        label: 'Date',\n        type: 'date',\n        validation: {\n          required: 'Date is required',\n        },\n      },\n      {\n        name: 'location',\n        label: 'Location',\n        type: 'text',\n        validation: {\n          required: 'Location is required',\n        },\n      },\n      {\n        name: 'organizer',\n        label: 'Organizer',\n        type: 'text',\n        validation: {\n          required: 'Organizer is required',\n        },\n      },\n      {\n        name: 'attendees',\n        label: 'Expected Attendees',\n        type: 'number',\n        validation: {\n          required: 'Number of attendees is required',\n          min: 1,\n        },\n      },\n      {\n        name: 'status',\n        label: 'Status',\n        type: 'select',\n        options: [\n          { value: 'upcoming', label: 'Upcoming' },\n          { value: 'inProgress', label: 'In Progress' },\n          { value: 'completed', label: 'Completed' },\n          { value: 'cancelled', label: 'Cancelled' },\n        ],\n        validation: {\n          required: 'Status is required',\n        },\n      },\n      {\n        name: 'description',\n        label: 'Description',\n        type: 'textarea',\n        placeholder: 'Enter event description',\n      },\n    ],\n    displayConfig: {\n      mode: 'dialog',\n      width: 'lg',\n      title: {\n        create: 'Create New Event',\n        edit: 'Edit Event',\n        view: 'Event Details',\n      },\n    },\n  };\n\n  const handleCreateEvent = () =&gt; {\n    setSelectedEvent(null);\n    setFormMode('create');\n    setIsFormOpen(true);\n  };\n\n  const handleFormSubmit = (data) =&gt; {\n    console.log('Form submitted:', data);\n    setIsFormOpen(false);\n    // Save event data\n  };\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;div className=\"flex justify-between items-center mb-4\"&gt;\n        &lt;h1 className=\"text-2xl font-bold\"&gt;Event Management&lt;/h1&gt;\n\n        {/* Only show create button if user has permission */}\n        {hasPermission('create_events') &amp;&amp; (\n          &lt;Button \n            variant=\"primary\" \n            onClick={handleCreateEvent}\n          &gt;\n            Create Event\n          &lt;/Button&gt;\n        )}\n      &lt;/div&gt;\n\n      &lt;DynamicTable \n        schema={tableSchema} \n        data={events} \n      /&gt;\n\n      &lt;DynamicForm\n        schema={formSchema}\n        onSubmit={handleFormSubmit}\n        mode={formMode}\n        isOpen={isFormOpen}\n        onClose={() =&gt; setIsFormOpen(false)}\n        initialData={selectedEvent}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default EventManagement;\n</code></pre>"},{"location":"examples/#permission-based-navigation","title":"Permission-Based Navigation","text":"<p>An example of a navigation menu with permission-based visibility:</p> <pre><code>import { usePermissions } from 'react-dynamic-forms-tables';\n\nfunction AppNavigation() {\n  const { hasPermission } = usePermissions();\n\n  const navItems = [\n    { \n      label: 'Dashboard', \n      path: '/', \n      permission: null, // Always visible\n      icon: 'HomeIcon'\n    },\n    { \n      label: 'Users', \n      path: '/users', \n      permission: 'view_users',\n      icon: 'UsersIcon'\n    },\n    { \n      label: 'Products', \n      path: '/products', \n      permission: 'view_products',\n      icon: 'ShoppingBagIcon'\n    },\n    { \n      label: 'Orders', \n      path: '/orders', \n      permission: 'view_orders',\n      icon: 'ShoppingCartIcon'\n    },\n    { \n      label: 'Reports', \n      path: '/reports', \n      permission: ['view_reports', 'admin'],\n      icon: 'ChartBarIcon'\n    },\n    { \n      label: 'Settings', \n      path: '/settings', \n      permission: 'admin',\n      icon: 'CogIcon'\n    },\n  ];\n\n  return (\n    &lt;nav className=\"bg-gray-800 text-white w-64 min-h-screen p-4\"&gt;\n      &lt;div className=\"text-xl font-bold mb-8 pl-2\"&gt;My Application&lt;/div&gt;\n\n      &lt;ul className=\"space-y-2\"&gt;\n        {navItems.map((item) =&gt; {\n          // If no permission is required, or user has the required permission\n          if (!item.permission || hasPermission(item.permission)) {\n            return (\n              &lt;li key={item.path}&gt;\n                &lt;a \n                  href={item.path} \n                  className=\"flex items-center px-2 py-2 rounded hover:bg-gray-700\"\n                &gt;\n                  &lt;span className=\"mr-3\"&gt;{/* Icon would go here */}&lt;/span&gt;\n                  {item.label}\n                &lt;/a&gt;\n              &lt;/li&gt;\n            );\n          }\n          return null;\n        })}\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  );\n}\n\nexport default AppNavigation;\n</code></pre>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide will help you get started with React Dynamic Forms &amp; Tables in your project.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<p>Install the library using npm or yarn:</p> <pre><code># Using npm\nnpm install react-dynamic-forms-tables\n\n# Using yarn\nyarn add react-dynamic-forms-tables\n</code></pre>"},{"location":"getting-started/#peer-dependencies","title":"Peer Dependencies","text":"<p>This library requires the following peer dependencies:</p> <pre><code># Using npm\nnpm install @headlessui/react @heroicons/react react-router-dom tailwindcss\n\n# Using yarn\nyarn add @headlessui/react @heroicons/react react-router-dom tailwindcss\n</code></pre>"},{"location":"getting-started/#setting-up-tailwind-css","title":"Setting Up Tailwind CSS","text":"<p>The library uses Tailwind CSS for styling. Make sure you have Tailwind CSS configured in your project:</p> <ol> <li>If you haven't already, install Tailwind CSS:</li> </ol> <pre><code>npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n</code></pre> <ol> <li>Configure your <code>tailwind.config.js</code>:</li> </ol> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/**/*.{js,jsx,ts,tsx}\",\n    // Add this line to include the library components\n    \"./node_modules/react-dynamic-forms-tables/**/*.{js,jsx,ts,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n</code></pre> <ol> <li>Import Tailwind in your main CSS file:</li> </ol> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre>"},{"location":"getting-started/#basic-setup","title":"Basic Setup","text":""},{"location":"getting-started/#setting-up-the-permission-provider","title":"Setting Up the Permission Provider","text":"<p>Wrap your application with the <code>PermissionProvider</code> to enable the permission system:</p> <pre><code>import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { PermissionProvider } from 'react-dynamic-forms-tables';\nimport App from './App';\nimport './index.css';\n\n// User permissions could come from your authentication system\nconst userPermissions = ['view_users', 'edit_users'];\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  &lt;React.StrictMode&gt;\n    &lt;PermissionProvider permissions={userPermissions}&gt;\n      &lt;App /&gt;\n    &lt;/PermissionProvider&gt;\n  &lt;/React.StrictMode&gt;,\n);\n</code></pre>"},{"location":"getting-started/#your-first-dynamic-form","title":"Your First Dynamic Form","text":"<p>Here's a simple example of creating a dynamic form:</p> <pre><code>import { DynamicForm, FormSchema } from 'react-dynamic-forms-tables';\nimport { useState } from 'react';\n\nfunction ContactForm() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const formSchema: FormSchema = {\n    fields: [\n      {\n        name: 'name',\n        label: 'Full Name',\n        type: 'text',\n        placeholder: 'Enter your full name',\n        validation: {\n          required: 'Name is required',\n        },\n      },\n      {\n        name: 'email',\n        label: 'Email Address',\n        type: 'email',\n        placeholder: 'Enter your email',\n        validation: {\n          required: 'Email is required',\n          pattern: {\n            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n            message: 'Invalid email address',\n          },\n        },\n      },\n      {\n        name: 'message',\n        label: 'Message',\n        type: 'textarea',\n        placeholder: 'Enter your message',\n        validation: {\n          required: 'Message is required',\n        },\n      },\n    ],\n    displayConfig: {\n      mode: 'dialog',\n      title: {\n        create: 'Contact Us',\n        edit: 'Edit Message',\n        view: 'View Message',\n      },\n    },\n  };\n\n  const handleSubmit = (data) =&gt; {\n    console.log('Form submitted:', data);\n    setIsOpen(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;button \n        className=\"px-4 py-2 bg-blue-600 text-white rounded\"\n        onClick={() =&gt; setIsOpen(true)}\n      &gt;\n        Open Contact Form\n      &lt;/button&gt;\n\n      &lt;DynamicForm\n        schema={formSchema}\n        onSubmit={handleSubmit}\n        mode=\"create\"\n        isOpen={isOpen}\n        onClose={() =&gt; setIsOpen(false)}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default ContactForm;\n</code></pre>"},{"location":"getting-started/#your-first-dynamic-table","title":"Your First Dynamic Table","text":"<p>Here's a simple example of creating a dynamic table:</p> <pre><code>import { DynamicTable, TableSchema } from 'react-dynamic-forms-tables';\n\nfunction UserTable() {\n  const tableSchema: TableSchema = {\n    columns: [\n      {\n        id: 'name',\n        header: 'Name',\n        accessor: 'name',\n        type: 'text',\n        sortable: true,\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        accessor: 'email',\n        type: 'text',\n        sortable: true,\n      },\n      {\n        id: 'role',\n        header: 'Role',\n        accessor: 'role',\n        type: 'text',\n      },\n      {\n        id: 'status',\n        header: 'Status',\n        accessor: 'status',\n        type: 'badge',\n        badgeOptions: {\n          active: {\n            variant: 'success',\n            label: 'Active',\n          },\n          inactive: {\n            variant: 'danger',\n            label: 'Inactive',\n          },\n        },\n      },\n    ],\n    actions: [\n      {\n        label: 'Edit',\n        onClick: (user) =&gt; console.log('Edit user:', user),\n        variant: 'primary',\n        permission: 'edit_users',\n      },\n      {\n        label: 'Delete',\n        onClick: (user) =&gt; console.log('Delete user:', user),\n        variant: 'danger',\n        permission: 'delete_users',\n      },\n    ],\n    keyField: 'id',\n  };\n\n  const users = [\n    {\n      id: '1',\n      name: 'John Doe',\n      email: 'john@example.com',\n      role: 'Admin',\n      status: 'active',\n    },\n    {\n      id: '2',\n      name: 'Jane Smith',\n      email: 'jane@example.com',\n      role: 'User',\n      status: 'active',\n    },\n    {\n      id: '3',\n      name: 'Bob Johnson',\n      email: 'bob@example.com',\n      role: 'User',\n      status: 'inactive',\n    },\n  ];\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;h1 className=\"text-2xl font-bold mb-4\"&gt;Users&lt;/h1&gt;\n      &lt;DynamicTable schema={tableSchema} data={users} /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default UserTable;\n</code></pre>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have the basics set up, you can explore more advanced features:</p> <ul> <li>Dynamic Forms - Learn more about form configuration options</li> <li>Dynamic Tables - Explore table features like filtering and sorting</li> <li>Permission System - Understand how to use the permission system</li> <li>Examples - See more complex examples</li> </ul>"},{"location":"permissions/","title":"Permission System","text":"<p>React Dynamic Forms &amp; Tables includes a robust permission system that allows you to control access to UI elements based on user permissions. This guide covers how to set up and use the permission system.</p>"},{"location":"permissions/#setting-up-the-permission-provider","title":"Setting Up the Permission Provider","text":"<p>To use the permission system, you need to wrap your application with the <code>PermissionProvider</code> component:</p> <pre><code>import { PermissionProvider } from 'react-dynamic-forms-tables';\n\nfunction App() {\n  // User permissions could come from your authentication system\n  const userPermissions = ['view_users', 'edit_users'];\n\n  return (\n    &lt;PermissionProvider permissions={userPermissions}&gt;\n      &lt;YourAppComponents /&gt;\n    &lt;/PermissionProvider&gt;\n  );\n}\n</code></pre>"},{"location":"permissions/#permission-types","title":"Permission Types","text":"<p>The permission system supports two types of permission checks:</p> <ol> <li>Single permission - Check if the user has a specific permission</li> <li>Multiple permissions - Check if the user has any of the specified permissions</li> </ol>"},{"location":"permissions/#using-permissions-with-buttons","title":"Using Permissions with Buttons","text":"<p>You can restrict buttons based on permissions:</p> <pre><code>import { Button } from 'react-dynamic-forms-tables';\n\nfunction UserActions() {\n  return (\n    &lt;div className=\"space-x-2\"&gt;\n      {/* This button will only be visible to users with 'create_user' permission */}\n      &lt;Button \n        permission=\"create_user\" \n        onClick={handleCreateUser}\n        variant=\"primary\"\n      &gt;\n        Create User\n      &lt;/Button&gt;\n\n      {/* This button requires any of the listed permissions */}\n      &lt;Button \n        permission={['edit_user', 'admin']} \n        onClick={handleEditUser}\n        variant=\"secondary\"\n      &gt;\n        Edit User\n      &lt;/Button&gt;\n\n      {/* This button requires the 'delete_user' permission */}\n      &lt;Button \n        permission=\"delete_user\" \n        onClick={handleDeleteUser}\n        variant=\"danger\"\n      &gt;\n        Delete User\n      &lt;/Button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"permissions/#using-permissions-with-table-actions","title":"Using Permissions with Table Actions","text":"<p>You can restrict table actions based on permissions:</p> <pre><code>const tableSchema: TableSchema = {\n  // ...other schema properties\n  actions: [\n    {\n      label: 'View',\n      onClick: (item) =&gt; console.log('View', item),\n      variant: 'outline',\n      permission: 'view_users', // Only users with this permission will see this action\n    },\n    {\n      label: 'Edit',\n      onClick: (item) =&gt; console.log('Edit', item),\n      variant: 'primary',\n      permission: 'edit_users', // Only users with this permission will see this action\n    },\n    {\n      label: 'Delete',\n      onClick: (item) =&gt; console.log('Delete', item),\n      variant: 'danger',\n      permission: ['delete_users', 'admin'], // Users with any of these permissions will see this action\n    },\n  ],\n};\n</code></pre>"},{"location":"permissions/#using-the-permission-hook","title":"Using the Permission Hook","text":"<p>You can use the <code>usePermissions</code> hook to check permissions in your components:</p> <pre><code>import { usePermissions } from 'react-dynamic-forms-tables';\n\nfunction UserManagement() {\n  const { hasPermission, userPermissions } = usePermissions();\n\n  // Check if user has a specific permission\n  const canCreateUser = hasPermission('create_user');\n\n  // Check if user has any of the permissions\n  const canManageUsers = hasPermission(['edit_users', 'delete_users', 'admin']);\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;h1 className=\"text-2xl font-bold mb-4\"&gt;User Management&lt;/h1&gt;\n\n      {canCreateUser &amp;&amp; (\n        &lt;button \n          className=\"px-4 py-2 bg-blue-600 text-white rounded mb-4\"\n          onClick={handleCreateUser}\n        &gt;\n          Create New User\n        &lt;/button&gt;\n      )}\n\n      {canManageUsers &amp;&amp; (\n        &lt;div className=\"mb-4\"&gt;\n          &lt;h2 className=\"text-lg font-semibold\"&gt;Advanced User Management&lt;/h2&gt;\n          {/* Advanced management features */}\n        &lt;/div&gt;\n      )}\n\n      &lt;div className=\"text-sm text-gray-500\"&gt;\n        Your permissions: {userPermissions.join(', ')}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"permissions/#conditional-rendering-with-permissions","title":"Conditional Rendering with Permissions","text":"<p>You can use the permission hook to conditionally render any part of your UI:</p> <pre><code>function Dashboard() {\n  const { hasPermission } = usePermissions();\n\n  return (\n    &lt;div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\"&gt;\n      {/* Always visible */}\n      &lt;DashboardCard title=\"Overview\" /&gt;\n\n      {/* Only visible with 'view_analytics' permission */}\n      {hasPermission('view_analytics') &amp;&amp; (\n        &lt;DashboardCard title=\"Analytics\" /&gt;\n      )}\n\n      {/* Only visible with 'view_reports' permission */}\n      {hasPermission('view_reports') &amp;&amp; (\n        &lt;DashboardCard title=\"Reports\" /&gt;\n      )}\n\n      {/* Only visible with admin or manager permission */}\n      {hasPermission(['admin', 'manager']) &amp;&amp; (\n        &lt;DashboardCard title=\"Team Performance\" /&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"permissions/#dynamic-navigation-based-on-permissions","title":"Dynamic Navigation Based on Permissions","text":"<p>You can build dynamic navigation menus based on user permissions:</p> <pre><code>function Navigation() {\n  const { hasPermission } = usePermissions();\n\n  const navItems = [\n    { label: 'Dashboard', path: '/', permission: null }, // Always visible\n    { label: 'Users', path: '/users', permission: 'view_users' },\n    { label: 'Products', path: '/products', permission: 'view_products' },\n    { label: 'Orders', path: '/orders', permission: 'view_orders' },\n    { label: 'Settings', path: '/settings', permission: ['admin', 'manager'] },\n  ];\n\n  return (\n    &lt;nav className=\"bg-gray-800 text-white p-4\"&gt;\n      &lt;ul className=\"flex space-x-4\"&gt;\n        {navItems.map((item) =&gt; {\n          // If no permission is required, or user has the required permission\n          if (!item.permission || hasPermission(item.permission)) {\n            return (\n              &lt;li key={item.path}&gt;\n                &lt;a href={item.path} className=\"hover:text-blue-300\"&gt;\n                  {item.label}\n                &lt;/a&gt;\n              &lt;/li&gt;\n            );\n          }\n          return null;\n        })}\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  );\n}\n</code></pre>"},{"location":"permissions/#complete-example","title":"Complete Example","text":"<p>Here's a complete example of using the permission system in a user management interface:</p> <pre><code>import { useState } from 'react';\nimport { \n  DynamicTable, \n  DynamicForm, \n  Button, \n  usePermissions, \n  TableSchema, \n  FormSchema \n} from 'react-dynamic-forms-tables';\n\nfunction UserManagement() {\n  const { hasPermission } = usePermissions();\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState(null);\n  const [formMode, setFormMode] = useState('create');\n\n  const users = [\n    {\n      id: '1',\n      name: 'John Doe',\n      email: 'john@example.com',\n      role: 'Admin',\n      status: 'active',\n    },\n    {\n      id: '2',\n      name: 'Jane Smith',\n      email: 'jane@example.com',\n      role: 'User',\n      status: 'active',\n    },\n    {\n      id: '3',\n      name: 'Bob Johnson',\n      email: 'bob@example.com',\n      role: 'User',\n      status: 'inactive',\n    },\n  ];\n\n  const tableSchema: TableSchema = {\n    columns: [\n      {\n        id: 'name',\n        header: 'Name',\n        accessor: 'name',\n        type: 'text',\n        sortable: true,\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        accessor: 'email',\n        type: 'text',\n      },\n      {\n        id: 'role',\n        header: 'Role',\n        accessor: 'role',\n        type: 'text',\n      },\n      {\n        id: 'status',\n        header: 'Status',\n        accessor: 'status',\n        type: 'badge',\n        badgeOptions: {\n          active: {\n            variant: 'success',\n            label: 'Active',\n          },\n          inactive: {\n            variant: 'danger',\n            label: 'Inactive',\n          },\n        },\n      },\n    ],\n    actions: [\n      {\n        label: 'Edit',\n        onClick: (user) =&gt; {\n          setSelectedUser(user);\n          setFormMode('edit');\n          setIsFormOpen(true);\n        },\n        variant: 'primary',\n        permission: 'edit_users',\n      },\n      {\n        label: 'Delete',\n        onClick: (user) =&gt; {\n          console.log('Delete user:', user);\n          // Show confirmation dialog and delete\n        },\n        variant: 'danger',\n        permission: 'delete_users',\n      },\n    ],\n    keyField: 'id',\n  };\n\n  const formSchema: FormSchema = {\n    fields: [\n      {\n        name: 'name',\n        label: 'Name',\n        type: 'text',\n        validation: {\n          required: 'Name is required',\n        },\n      },\n      {\n        name: 'email',\n        label: 'Email',\n        type: 'email',\n        validation: {\n          required: 'Email is required',\n          pattern: {\n            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\n            message: 'Invalid email address',\n          },\n        },\n      },\n      {\n        name: 'role',\n        label: 'Role',\n        type: 'select',\n        options: [\n          { value: 'Admin', label: 'Administrator' },\n          { value: 'User', label: 'Regular User' },\n          { value: 'Editor', label: 'Editor' },\n        ],\n        validation: {\n          required: 'Role is required',\n        },\n      },\n      {\n        name: 'status',\n        label: 'Status',\n        type: 'select',\n        options: [\n          { value: 'active', label: 'Active' },\n          { value: 'inactive', label: 'Inactive' },\n        ],\n        validation: {\n          required: 'Status is required',\n        },\n      },\n    ],\n    displayConfig: {\n      mode: 'dialog',\n      title: {\n        create: 'Create New User',\n        edit: 'Edit User',\n        view: 'User Details',\n      },\n    },\n  };\n\n  const handleCreateUser = () =&gt; {\n    setSelectedUser(null);\n    setFormMode('create');\n    setIsFormOpen(true);\n  };\n\n  const handleFormSubmit = (data) =&gt; {\n    console.log('Form submitted:', data);\n    setIsFormOpen(false);\n    // Save user data\n  };\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;div className=\"flex justify-between items-center mb-4\"&gt;\n        &lt;h1 className=\"text-2xl font-bold\"&gt;User Management&lt;/h1&gt;\n\n        {/* Only show create button if user has permission */}\n        {hasPermission('create_users') &amp;&amp; (\n          &lt;Button \n            variant=\"primary\" \n            onClick={handleCreateUser}\n          &gt;\n            Create User\n          &lt;/Button&gt;\n        )}\n      &lt;/div&gt;\n\n      &lt;DynamicTable \n        schema={tableSchema} \n        data={users} \n      /&gt;\n\n      &lt;DynamicForm\n        schema={formSchema}\n        onSubmit={handleFormSubmit}\n        mode={formMode}\n        isOpen={isFormOpen}\n        onClose={() =&gt; setIsFormOpen(false)}\n        initialData={selectedUser}\n      /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default UserManagement;\n</code></pre>"}]}